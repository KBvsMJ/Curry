#!/usr/bin/env xcrun swift

// Generates a Swift file with implementation of function currying for a ridicolously high number of arguments

import Foundation

let generics = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

extension Array {
  subscript(safe index: Int) -> Element? {
    return indices ~= index ? self[index] : .none
  }
}

func genericTypeForPosition(x: Int) -> String {
  let max = generics.count
  switch x {
  case _ where x < max: return generics[x % max]
  default: return generics[x / max - 1] + generics[x % max]
  }
}

func commaConcat(_ xs: [String]) -> String {
  return xs.joined(separator: ", ")
}

func curryDefinitionGenerator(arguments: Int) -> String {
  let genericParameters = (0..<arguments).map(genericTypeForPosition) // ["A", "B", "C"]
  let genericTypeDefinition = "<\(commaConcat(genericParameters))>" // "<A, B, C>"

  let inputParameters = Array(genericParameters[0..<arguments - 1]) // ["A", "B"]
  let lowerFunctionArguments = inputParameters.map { "`\($0.lowercased())`" } // ["`a`", "`b`"]
  let returnType = genericParameters.last! // "C"

  let functionArguments = "(\(commaConcat(inputParameters)))" // "(A, B)"
  let returnFunctionArguments = inputParameters.joined(separator: " -> ") // " A -> B"
  let innerFunctionArguments = commaConcat(lowerFunctionArguments) // "`a`, `b`"

  let functionDefinition = "function(\(innerFunctionArguments))" // return function(`a`, `b`)

  let implementation = lowerFunctionArguments.enumerated().reversed().reduce(functionDefinition) { accum, tuple in
    let (index, argument) = tuple
    return "{ (\(argument): \(inputParameters[index])) -> \(genericParameters.suffix(from: index + 1).joined(separator: " -> ")) in \(accum) }"
  } // "{ (`a`: A) -> B -> C in { (`b`: B) -> C in function(`a`, `b`) } }"

  let curry = [
    "public func curry\(genericTypeDefinition)(function: \(functionArguments) -> \(returnType)) -> \(returnFunctionArguments) -> \(returnType) {",
    "    return \(implementation)",
    "}"
  ]

  return curry.joined(separator: "\n")
}

print("Generating üí¨")

let input = Process.arguments[safe: 1] ?? "20"
let limit = Int(input)!

let start = 2
let curries = (start...limit+1).map { curryDefinitionGenerator(arguments: $0) }

let output = curries.joined(separator: "\n\n") + "\n"

let outputPath = "Source/Curry.swift"
let currentPath = NSURL(fileURLWithPath: FileManager.default().currentDirectoryPath)
let currySwiftPath = currentPath.appendingPathComponent(outputPath)!

do {
  try output.write(to: currySwiftPath, atomically: true, encoding: String.Encoding.utf8)
} catch let e as NSError {
  print("An error occurred while saving the generated functions. Error: \(e)")
}

print("Done, curry functions files written at \(outputPath) üëç")
